{
  "version": 3,
  "sources": ["../plugin/index.ts", "../plugin/lib/constant.ts", "../plugin/lib/util.ts", "../plugin/mkcert/index.ts", "../plugin/lib/logger.ts", "../plugin/mkcert/config.ts", "../plugin/lib/request.ts", "../plugin/mkcert/downloader.ts", "../plugin/mkcert/record.ts", "../plugin/mkcert/source.ts", "../plugin/mkcert/version.ts"],
  "sourcesContent": ["import { createLogger, type PluginOption } from 'vite'\r\n\r\nimport { PLUGIN_NAME } from './lib/constant'\r\nimport { getDefaultHosts } from './lib/util'\r\nimport Mkcert, { type MkcertBaseOptions } from './mkcert/index'\r\n\r\nexport { BaseSource, type SourceInfo } from './mkcert/source'\r\n\r\nexport type MkcertPluginOptions = MkcertBaseOptions & {\r\n  /**\r\n   * The hosts that needs to generate the certificate.\r\n   */\r\n  hosts?: string[]\r\n}\r\n\r\nconst plugin = (options: MkcertPluginOptions = {}): PluginOption => {\r\n  return {\r\n    name: PLUGIN_NAME,\r\n    apply: 'serve',\r\n    config: async ({ server = {}, logLevel }) => {\r\n      // v5.0 \u4EE5\u4E0B\u652F\u6301 boolean \u7C7B\u578B\u7684 https \u914D\u7F6E\r\n      if (typeof server.https === 'boolean' && server.https === false) {\r\n        return\r\n      }\r\n\r\n      const { hosts = [], ...mkcertOptions } = options\r\n\r\n      const logger = createLogger(logLevel, {\r\n        prefix: PLUGIN_NAME\r\n      })\r\n      const mkcert = Mkcert.create({\r\n        logger,\r\n        ...mkcertOptions\r\n      })\r\n\r\n      await mkcert.init()\r\n\r\n      const allHosts = [...getDefaultHosts(), ...hosts]\r\n\r\n      if (typeof server.host === 'string') {\r\n        allHosts.push(server.host)\r\n      }\r\n\r\n      const uniqueHosts = Array.from(new Set(allHosts)).filter(Boolean)\r\n\r\n      const certificate = await mkcert.install(uniqueHosts)\r\n      const httpsConfig = {\r\n        key: certificate.key && Buffer.from(certificate.key),\r\n        cert: certificate.cert && Buffer.from(certificate.cert)\r\n      }\r\n\r\n      return {\r\n        server: {\r\n          https: httpsConfig\r\n        },\r\n        preview: {\r\n          https: httpsConfig\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default plugin\r\n", "import os from 'node:os'\r\nimport path from 'node:path'\r\n\r\nexport const PKG_NAME = 'vite-plugin-mkcert'\r\n\r\nexport const PLUGIN_NAME = PKG_NAME.replace(/-/g, ':')\r\n\r\nexport const PLUGIN_DATA_DIR = path.join(os.homedir(), `.${PKG_NAME}`)\r\n", "import child_process, { type ExecOptions } from 'node:child_process'\r\nimport crypto from 'node:crypto'\r\nimport fs from 'node:fs'\r\nimport os from 'node:os'\r\nimport path from 'node:path'\r\nimport util from 'node:util'\r\n\r\nimport { PLUGIN_NAME } from './constant'\r\n\r\n/**\r\n * Check if file exists\r\n *\r\n * @param filePath file path\r\n * @returns does the file exist\r\n */\r\nexport const exists = async (filePath: string) => {\r\n  try {\r\n    await fs.promises.access(filePath)\r\n    return true\r\n  } catch (_error) {\r\n    return false\r\n  }\r\n}\r\n\r\nexport const mkdir = async (dirname: string) => {\r\n  const isExist = await exists(dirname)\r\n\r\n  if (!isExist) {\r\n    await fs.promises.mkdir(dirname, { recursive: true })\r\n  }\r\n}\r\n\r\nexport const ensureDirExist = async (filePath: string, strip = false) => {\r\n  const dirname = strip ? path.dirname(filePath) : filePath\r\n  await mkdir(dirname)\r\n}\r\n\r\nexport const readFile = async (filePath: string) => {\r\n  const isExist = await exists(filePath)\r\n  return isExist ? (await fs.promises.readFile(filePath)).toString() : undefined\r\n}\r\n\r\nexport const writeFile = async (\r\n  filePath: string,\r\n  data: string | Uint8Array\r\n) => {\r\n  await ensureDirExist(filePath, true)\r\n  await fs.promises.writeFile(filePath, data)\r\n  await fs.promises.chmod(filePath, 0o777)\r\n}\r\n\r\nexport const readDir = async (source: string) => {\r\n  return fs.promises.readdir(source)\r\n}\r\n\r\nexport const copyDir = async (source: string, dest: string) => {\r\n  try {\r\n    await fs.promises.cp(source, dest, {\r\n      recursive: true\r\n    })\r\n  } catch (error: any) {\r\n    // Fails when nodejs version < 16.7.0, ignore?\r\n    console.log(`${PLUGIN_NAME}:`, error)\r\n  }\r\n}\r\n\r\nexport const exec = async (cmd: string, options?: ExecOptions) => {\r\n  return util.promisify(child_process.exec)(cmd, options)\r\n}\r\n\r\n/**\r\n * http://nodejs.cn/api/os/os_networkinterfaces.html\r\n */\r\nconst isIPV4 = (family: string | number) => {\r\n  return family === 'IPv4' || family === 4\r\n}\r\n\r\nexport const getLocalV4Ips = () => {\r\n  const interfaceDict = os.networkInterfaces()\r\n  const addresses: string[] = []\r\n  for (const key in interfaceDict) {\r\n    const interfaces = interfaceDict[key]\r\n    if (interfaces) {\r\n      for (const item of interfaces) {\r\n        if (isIPV4(item.family)) {\r\n          addresses.push(item.address)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return addresses\r\n}\r\n\r\nexport const getDefaultHosts = () => {\r\n  return ['localhost', ...getLocalV4Ips()]\r\n}\r\n\r\nexport const getHash = async (filePath: string) => {\r\n  const content = await readFile(filePath)\r\n\r\n  if (content) {\r\n    const hash = crypto.createHash('sha256')\r\n    hash.update(content)\r\n    return hash.digest('hex')\r\n  }\r\n\r\n  return undefined\r\n}\r\n\r\nconst isObj = (obj: any) =>\r\n  Object.prototype.toString.call(obj) === '[object Object]'\r\n\r\nconst mergeObj = (target: any, source: any) => {\r\n  if (!(isObj(target) && isObj(source))) {\r\n    return target\r\n  }\r\n\r\n  for (const key in source) {\r\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n      const targetValue = target[key]\r\n      const sourceValue = source[key]\r\n\r\n      if (isObj(targetValue) && isObj(sourceValue)) {\r\n        mergeObj(targetValue, sourceValue)\r\n      } else {\r\n        target[key] = sourceValue\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const deepMerge = (target: any, ...source: any[]) => {\r\n  return source.reduce((a, b) => mergeObj(a, b), target)\r\n}\r\n\r\nexport const prettyLog = (obj?: Record<string, any>) => {\r\n  return JSON.stringify(obj, null, 2)\r\n}\r\n\r\nexport const escapeStr = (path?: string) => {\r\n  return `\"${path}\"`\r\n}\r\n", "import path from 'node:path'\r\nimport process from 'node:process'\r\n\r\nimport pc from 'picocolors'\r\nimport type { Logger } from 'vite'\r\n\r\nimport { PLUGIN_DATA_DIR } from '../lib/constant'\r\nimport { debug } from '../lib/logger'\r\nimport {\r\n  copyDir,\r\n  ensureDirExist,\r\n  escapeStr,\r\n  exec,\r\n  exists,\r\n  getHash,\r\n  prettyLog,\r\n  readDir,\r\n  readFile\r\n} from '../lib/util'\r\n\r\nimport Config from './config'\r\nimport Downloader from './downloader'\r\nimport Record from './record'\r\nimport { type BaseSource, GithubSource, CodingSource } from './source'\r\nimport VersionManger from './version'\r\n\r\nexport type SourceType = 'github' | 'coding' | BaseSource\r\n\r\nexport type MkcertBaseOptions = {\r\n  /**\r\n   * Whether to force generate\r\n   */\r\n  force?: boolean\r\n\r\n  /**\r\n   * Automatically upgrade mkcert\r\n   *\r\n   * @default false\r\n   */\r\n  autoUpgrade?: boolean\r\n\r\n  /**\r\n   * Specify mkcert download source\r\n   *\r\n   * @default github\r\n   */\r\n  source?: SourceType\r\n\r\n  /**\r\n   * If your network is restricted, you can specify a local binary file instead of downloading, it should be an absolute path\r\n   *\r\n   * @default none\r\n   */\r\n  mkcertPath?: string\r\n\r\n  /**\r\n   * The location to save the files, such as key and cert files\r\n   */\r\n  savePath?: string\r\n\r\n  /**\r\n   * The name of private key file generated by mkcert\r\n   */\r\n  keyFileName?: string\r\n\r\n  /**\r\n   * The name of cert file generated by mkcert\r\n   */\r\n  certFileName?: string\r\n}\r\n\r\nexport type MkcertOptions = MkcertBaseOptions & {\r\n  logger: Logger\r\n}\r\n\r\nclass Mkcert {\r\n  private force?: boolean\r\n  private autoUpgrade?: boolean\r\n  private sourceType: SourceType\r\n  private savePath: string\r\n  private logger: Logger\r\n\r\n  private source: BaseSource\r\n  private localMkcert?: string\r\n  private savedMkcert: string\r\n  private keyFilePath: string\r\n  private certFilePath: string\r\n\r\n  private config: Config\r\n\r\n  public static create(options: MkcertOptions) {\r\n    return new Mkcert(options)\r\n  }\r\n\r\n  private constructor(options: MkcertOptions) {\r\n    const {\r\n      force,\r\n      autoUpgrade,\r\n      source,\r\n      mkcertPath,\r\n      savePath = PLUGIN_DATA_DIR,\r\n      keyFileName = 'dev.pem',\r\n      certFileName = 'cert.pem',\r\n      logger\r\n    } = options\r\n\r\n    this.force = force\r\n    this.logger = logger\r\n    this.autoUpgrade = autoUpgrade\r\n    this.localMkcert = mkcertPath\r\n    this.savePath = path.resolve(savePath)\r\n    this.keyFilePath = path.resolve(savePath, keyFileName)\r\n    this.certFilePath = path.resolve(savePath, certFileName)\r\n    this.sourceType = source || 'github'\r\n\r\n    if (this.sourceType === 'github') {\r\n      this.source = GithubSource.create()\r\n    } else if (this.sourceType === 'coding') {\r\n      this.source = CodingSource.create()\r\n    } else {\r\n      this.source = this.sourceType\r\n    }\r\n\r\n    this.savedMkcert = path.resolve(\r\n      savePath,\r\n      process.platform === 'win32' ? 'mkcert.exe' : 'mkcert'\r\n    )\r\n\r\n    this.config = new Config({ savePath: this.savePath })\r\n  }\r\n\r\n  private async getMkcertBinary() {\r\n    let binary: string | undefined\r\n\r\n    if (this.localMkcert) {\r\n      if (await exists(this.localMkcert)) {\r\n        binary = this.localMkcert\r\n      } else {\r\n        this.logger.error(\r\n          pc.red(\r\n            `${this.localMkcert} does not exist, please check the mkcertPath parameter`\r\n          )\r\n        )\r\n      }\r\n    } else if (await exists(this.savedMkcert)) {\r\n      binary = this.savedMkcert\r\n    }\r\n\r\n    return binary\r\n  }\r\n\r\n  private async checkCAExists() {\r\n    const files = await readDir(this.savePath)\r\n    return files.some(file => file.includes('rootCA'))\r\n  }\r\n\r\n  private async retainExistedCA() {\r\n    if (await this.checkCAExists()) {\r\n      return\r\n    }\r\n\r\n    const mkcertBinary = await this.getMkcertBinary()\r\n    const commandStatement = `${escapeStr(mkcertBinary)} -CAROOT`\r\n\r\n    debug(`Exec ${commandStatement}`)\r\n\r\n    const commandResult = await exec(commandStatement)\r\n    const caDirPath = path.resolve(\r\n      commandResult.stdout.toString().replace(/\\n/g, '')\r\n    )\r\n\r\n    if (caDirPath === this.savePath) {\r\n      return\r\n    }\r\n\r\n    const caDirExists = await exists(caDirPath)\r\n\r\n    if (!caDirExists) {\r\n      return\r\n    }\r\n\r\n    await copyDir(caDirPath, this.savePath)\r\n  }\r\n\r\n  private async getCertificate() {\r\n    const key = await readFile(this.keyFilePath)\r\n    const cert = await readFile(this.certFilePath)\r\n\r\n    return {\r\n      key,\r\n      cert\r\n    }\r\n  }\r\n\r\n  private async createCertificate(hosts: string[]) {\r\n    const names = hosts.join(' ')\r\n    const mkcertBinary = await this.getMkcertBinary()\r\n\r\n    if (!mkcertBinary) {\r\n      debug(\r\n        `Mkcert does not exist, unable to generate certificate for ${names}`\r\n      )\r\n    }\r\n\r\n    await ensureDirExist(this.savePath)\r\n    await this.retainExistedCA()\r\n\r\n    const cmd = `${escapeStr(mkcertBinary)} -install -key-file ${escapeStr(\r\n      this.keyFilePath\r\n    )} -cert-file ${escapeStr(this.certFilePath)} ${names}`\r\n\r\n    await exec(cmd, {\r\n      env: {\r\n        ...process.env,\r\n        CAROOT: this.savePath,\r\n        JAVA_HOME: undefined\r\n      }\r\n    })\r\n\r\n    this.logger.info(\r\n      `The list of generated files:\\n${this.keyFilePath}\\n${this.certFilePath}`\r\n    )\r\n  }\r\n\r\n  private getLatestHash = async () => {\r\n    return {\r\n      key: await getHash(this.keyFilePath),\r\n      cert: await getHash(this.certFilePath)\r\n    }\r\n  }\r\n\r\n  private async regenerate(record: Record, hosts: string[]) {\r\n    await this.createCertificate(hosts)\r\n\r\n    const hash = await this.getLatestHash()\r\n\r\n    record.update({ hosts, hash })\r\n  }\r\n\r\n  public async init() {\r\n    await ensureDirExist(this.savePath)\r\n    await this.config.init()\r\n\r\n    const mkcertBinary = await this.getMkcertBinary()\r\n\r\n    if (!mkcertBinary) {\r\n      await this.initMkcert()\r\n    } else if (this.autoUpgrade) {\r\n      await this.upgradeMkcert()\r\n    }\r\n  }\r\n\r\n  private async getSourceInfo() {\r\n    const sourceInfo = await this.source.getSourceInfo()\r\n\r\n    if (!sourceInfo) {\r\n      const message =\r\n        typeof this.sourceType === 'string'\r\n          ? `Unsupported platform. Unable to find a binary file for ${process.platform\r\n          } platform with ${process.arch} arch on ${this.sourceType === 'github'\r\n            ? 'https://github.com/FiloSottile/mkcert/releases'\r\n            : 'https://liuweigl.coding.net/p/github/artifacts?hash=8d4dd8949af543159c1b5ac71ff1ff72'\r\n          }`\r\n          : 'Please check your custom \"source\", it seems to return invalid result'\r\n      throw new Error(message)\r\n    }\r\n\r\n    return sourceInfo\r\n  }\r\n\r\n  private async initMkcert() {\r\n    const sourceInfo = await this.getSourceInfo()\r\n\r\n    debug('The mkcert does not exist, download it now')\r\n\r\n    await this.downloadMkcert(sourceInfo.downloadUrl, this.savedMkcert)\r\n  }\r\n\r\n  private async upgradeMkcert() {\r\n    const versionManger = new VersionManger({ config: this.config })\r\n    const sourceInfo = await this.getSourceInfo()\r\n\r\n    if (!sourceInfo) {\r\n      this.logger.error(\r\n        'Can not obtain download information of mkcert, update skipped'\r\n      )\r\n      return\r\n    }\r\n\r\n    const versionInfo = versionManger.compare(sourceInfo.version)\r\n\r\n    if (!versionInfo.shouldUpdate) {\r\n      debug('Mkcert is kept latest version, update skipped')\r\n      return\r\n    }\r\n\r\n    if (versionInfo.breakingChange) {\r\n      debug(\r\n        'The current version of mkcert is %s, and the latest version is %s, there may be some breaking changes, update skipped',\r\n        versionInfo.currentVersion,\r\n        versionInfo.nextVersion\r\n      )\r\n      return\r\n    }\r\n\r\n    debug(\r\n      'The current version of mkcert is %s, and the latest version is %s, mkcert will be updated',\r\n      versionInfo.currentVersion,\r\n      versionInfo.nextVersion\r\n    )\r\n\r\n    await this.downloadMkcert(sourceInfo.downloadUrl, this.savedMkcert)\r\n    versionManger.update(versionInfo.nextVersion)\r\n  }\r\n\r\n  private async downloadMkcert(sourceUrl: string, distPath: string) {\r\n    const downloader = Downloader.create()\r\n    await downloader.download(sourceUrl, distPath)\r\n  }\r\n\r\n  public async renew(hosts: string[]) {\r\n    const record = new Record({ config: this.config })\r\n\r\n    if (this.force) {\r\n      debug('Certificate is forced to regenerate')\r\n\r\n      await this.regenerate(record, hosts)\r\n    }\r\n\r\n    if (!record.contains(hosts)) {\r\n      debug(\r\n        `The hosts changed from [${record.getHosts()}] to [${hosts}], start regenerate certificate`\r\n      )\r\n\r\n      await this.regenerate(record, hosts)\r\n      return\r\n    }\r\n\r\n    const hash = await this.getLatestHash()\r\n\r\n    if (!record.equal(hash)) {\r\n      debug(\r\n        `The hash changed from ${prettyLog(record.getHash())} to ${prettyLog(\r\n          hash\r\n        )}, start regenerate certificate`\r\n      )\r\n\r\n      await this.regenerate(record, hosts)\r\n      return\r\n    }\r\n\r\n    debug('Neither hosts nor hash has changed, skip regenerate certificate')\r\n  }\r\n\r\n  /**\r\n   * Get certificates\r\n   *\r\n   * @param hosts host collection\r\n   * @returns cretificates\r\n   */\r\n  public async install(hosts: string[]) {\r\n    if (hosts.length) {\r\n      await this.renew(hosts)\r\n    }\r\n\r\n    return await this.getCertificate()\r\n  }\r\n}\r\n\r\nexport default Mkcert\r\n", "import Debug from 'debug'\r\n\r\nimport { PLUGIN_NAME } from './constant'\r\n\r\nexport const debug = Debug(PLUGIN_NAME)\r\n", "import path from 'node:path'\r\n\r\nimport { debug } from '../lib/logger'\r\nimport { readFile, writeFile, prettyLog, deepMerge } from '../lib/util'\r\n\r\nexport type RecordMate = {\r\n  /**\r\n   * The hosts that have generated certificate\r\n   */\r\n  hosts: string[]\r\n\r\n  /**\r\n   * file hash\r\n   */\r\n  hash?: RecordHash\r\n}\r\n\r\nexport type RecordHash = {\r\n  key?: string\r\n  cert?: string\r\n}\r\n\r\nexport type ConfigOptions = {\r\n  savePath: string\r\n}\r\n\r\nconst CONFIG_FILE_NAME = 'config.json'\r\n\r\nclass Config {\r\n  /**\r\n   * The mkcert version\r\n   */\r\n  private version: string | undefined\r\n\r\n  private record: RecordMate | undefined\r\n\r\n  private configFilePath: string\r\n\r\n  constructor({ savePath }: ConfigOptions) {\r\n    this.configFilePath = path.resolve(savePath, CONFIG_FILE_NAME)\r\n  }\r\n\r\n  public async init() {\r\n    const str = await readFile(this.configFilePath)\r\n    const options = str ? JSON.parse(str) : undefined\r\n\r\n    if (options) {\r\n      this.version = options.version\r\n      this.record = options.record\r\n    }\r\n  }\r\n\r\n  private async serialize() {\r\n    await writeFile(this.configFilePath, prettyLog(this))\r\n  }\r\n\r\n  // deep merge\r\n  public async merge(obj: Record<string, any>) {\r\n    const currentStr = prettyLog(this)\r\n\r\n    deepMerge(this, obj)\r\n\r\n    const nextStr = prettyLog(this)\r\n\r\n    debug(\r\n      `Receive parameter\\n ${prettyLog(\r\n        obj\r\n      )}\\nUpdate config from\\n ${currentStr} \\nto\\n ${nextStr}`\r\n    )\r\n\r\n    await this.serialize()\r\n  }\r\n\r\n  public getRecord() {\r\n    return this.record\r\n  }\r\n\r\n  public getVersion() {\r\n    return this.version\r\n  }\r\n}\r\n\r\nexport default Config\r\n", "import axios from 'axios'\r\n\r\nimport { debug } from './logger'\r\n\r\nconst request = axios.create()\r\n\r\nrequest.interceptors.response.use(\r\n  res => {\r\n    return res\r\n  },\r\n  error => {\r\n    debug('Request error: %o', error)\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default request\r\n", "import { debug } from '../lib/logger'\r\nimport request from '../lib/request'\r\nimport { writeFile } from '../lib/util'\r\n\r\nclass Downloader {\r\n  public static create() {\r\n    return new Downloader()\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  public async download(downloadUrl: string, savedPath: string) {\r\n    debug('Downloading the mkcert executable from %s', downloadUrl)\r\n\r\n    const { data } = await request.get(downloadUrl, {\r\n      responseType: 'arraybuffer'\r\n    })\r\n\r\n    await writeFile(savedPath, data)\r\n\r\n    debug('The mkcert has been saved to %s', savedPath)\r\n  }\r\n}\r\n\r\nexport default Downloader\r\n", "import type Config from './config'\r\nimport type { RecordHash, RecordMate } from './config'\r\n\r\nexport type RecordProps = {\r\n  config: Config\r\n}\r\nclass Record {\r\n  private config: Config\r\n\r\n  constructor(options: RecordProps) {\r\n    this.config = options.config\r\n  }\r\n\r\n  public getHosts() {\r\n    return this.config.getRecord()?.hosts\r\n  }\r\n\r\n  public getHash() {\r\n    return this.config.getRecord()?.hash\r\n  }\r\n\r\n  public contains(hosts: string[]) {\r\n    const oldHosts = this.getHosts()\r\n\r\n    if (!oldHosts) {\r\n      return false\r\n    }\r\n\r\n    // require hosts is subset of oldHosts\r\n    for (const host of hosts) {\r\n      if (!oldHosts.includes(host)) {\r\n        return false\r\n      }\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  // whether the files has been tampered with\r\n  public equal(hash: RecordHash) {\r\n    const oldHash = this.getHash()\r\n\r\n    if (!oldHash) {\r\n      return false\r\n    }\r\n\r\n    return oldHash.key === hash.key && oldHash.cert === hash.cert\r\n  }\r\n\r\n  public async update(record: RecordMate) {\r\n    await this.config.merge({ record })\r\n  }\r\n}\r\n\r\nexport default Record\r\n", "import request from '../lib/request'\r\n\r\nexport type SourceInfo = {\r\n  version: string\r\n  downloadUrl: string\r\n}\r\n\r\nexport abstract class BaseSource {\r\n  abstract getSourceInfo(): Promise<SourceInfo | undefined>\r\n\r\n  protected getPlatformIdentifier() {\r\n    const arch = process.arch === 'x64' ? 'amd64' : process.arch\r\n    return process.platform === 'win32'\r\n      ? `windows-${arch}.exe`\r\n      : `${process.platform}-${arch}`\r\n  }\r\n}\r\n\r\n/**\r\n * Download mkcert from github.com\r\n */\r\nexport class GithubSource extends BaseSource {\r\n  public static create() {\r\n    return new GithubSource()\r\n  }\r\n\r\n  private constructor() {\r\n    super()\r\n  }\r\n\r\n  public async getSourceInfo(): Promise<SourceInfo | undefined> {\r\n    const { data } = await request({\r\n      method: 'GET',\r\n      url: 'https://api.github.com/repos/FiloSottile/mkcert/releases/latest',\r\n    })\r\n    const platformIdentifier = this.getPlatformIdentifier()\r\n    const version = data.tag_name\r\n    const downloadUrl = data.assets.find((item: any) =>\r\n      item.name.includes(platformIdentifier)\r\n    )?.browser_download_url\r\n\r\n    if (!(version && downloadUrl)) {\r\n      return undefined\r\n    }\r\n\r\n    return {\r\n      downloadUrl,\r\n      version\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Download mkcert from coding.net\r\n *\r\n * @see https://help.coding.net/openapi\r\n */\r\nexport class CodingSource extends BaseSource {\r\n  public static CODING_API = 'https://e.coding.net/open-api'\r\n  public static CODING_AUTHORIZATION =\r\n    'token 000f7831ec425079439b0f55f55c729c9280d66e'\r\n  public static CODING_PROJECT_ID = 8524617\r\n  public static REPOSITORY = 'mkcert'\r\n\r\n  public static create() {\r\n    return new CodingSource()\r\n  }\r\n\r\n  private constructor() {\r\n    super()\r\n  }\r\n\r\n  private async request(data: any) {\r\n    return request({\r\n      data,\r\n      method: 'POST',\r\n      url: CodingSource.CODING_API,\r\n      headers: {\r\n        Authorization: CodingSource.CODING_AUTHORIZATION\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get filename of Coding.net artifacts\r\n   *\r\n   * @see https://liuweigl.coding.net/p/github/artifacts/885241/generic/packages\r\n   *\r\n   * @returns name\r\n   */\r\n  private getPackageName() {\r\n    return `mkcert-${this.getPlatformIdentifier()}`\r\n  }\r\n\r\n  async getSourceInfo(): Promise<SourceInfo | undefined> {\r\n    /**\r\n     * @see https://help.coding.net/openapi#e2106ec64e75af66f188463b1bb7e165\r\n     */\r\n    const { data: VersionData } = await this.request({\r\n      Action: 'DescribeArtifactVersionList',\r\n      ProjectId: CodingSource.CODING_PROJECT_ID,\r\n      Repository: CodingSource.REPOSITORY,\r\n      Package: this.getPackageName(),\r\n      PageSize: 1\r\n    })\r\n\r\n    const version = VersionData.Response.Data?.InstanceSet[0]?.Version\r\n\r\n    if (!version) {\r\n      return undefined\r\n    }\r\n\r\n    /**\r\n     * @see https://help.coding.net/openapi#63ad6bc7469373cef575e92bb92be71e\r\n     */\r\n    const { data: FileData } = await this.request({\r\n      Action: 'DescribeArtifactFileDownloadUrl',\r\n      ProjectId: CodingSource.CODING_PROJECT_ID,\r\n      Repository: CodingSource.REPOSITORY,\r\n      Package: this.getPackageName(),\r\n      PackageVersion: version\r\n    })\r\n\r\n    const downloadUrl = FileData.Response.Url\r\n\r\n    if (!downloadUrl) {\r\n      return undefined\r\n    }\r\n\r\n    return {\r\n      downloadUrl,\r\n      version\r\n    }\r\n  }\r\n}\r\n", "import { debug } from '../lib/logger'\r\n\r\nimport type Config from './config'\r\n\r\nexport type VersionMangerProps = {\r\n  config: Config\r\n}\r\n\r\nconst parseVersion = (version: string) => {\r\n  const str = version.trim().replace(/v/i, '')\r\n\r\n  return str.split('.')\r\n}\r\n\r\nclass VersionManger {\r\n  private config: Config\r\n\r\n  public constructor(props: VersionMangerProps) {\r\n    this.config = props.config\r\n  }\r\n\r\n  public async update(version: string) {\r\n    try {\r\n      await this.config.merge({ version })\r\n    } catch (err) {\r\n      debug('Failed to record mkcert version info: %o', err)\r\n    }\r\n  }\r\n\r\n  public compare(version: string) {\r\n    const currentVersion = this.config.getVersion()\r\n\r\n    if (!currentVersion) {\r\n      return {\r\n        currentVersion,\r\n        nextVersion: version,\r\n        breakingChange: false,\r\n        shouldUpdate: true\r\n      }\r\n    }\r\n\r\n    let breakingChange = false\r\n    let shouldUpdate = false\r\n\r\n    const newVersion = parseVersion(version)\r\n    const oldVersion = parseVersion(currentVersion)\r\n\r\n    for (let i = 0; i < newVersion.length; i++) {\r\n      if (newVersion[i] > oldVersion[i]) {\r\n        shouldUpdate = true\r\n        breakingChange = i === 0\r\n        break\r\n      }\r\n    }\r\n    return {\r\n      breakingChange,\r\n      shouldUpdate,\r\n      currentVersion,\r\n      nextVersion: version\r\n    }\r\n  }\r\n}\r\n\r\nexport default VersionManger\r\n"],
  "mappings": "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",
  "names": ["path", "os", "import_node_os", "import_node_path", "fs", "path", "util", "child_process", "os", "crypto", "import_node_path", "Debug", "import_node_path", "path", "axios", "path", "process", "pc"]
}
